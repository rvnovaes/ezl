# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2018-02-21 12:33
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
from django.utils import timezone
import django.db.models.deletion
import core.models
from core.permissions import create_permission
from guardian.shortcuts import get_groups_with_perms


def remove_persons_from_office(apps, schema_editor):
    from django.contrib.auth.models import User
    from core.models import Office
    admin = User.objects.filter(username='admin').first()
    if admin:
        Office(
            create_user=admin,
            cpf_cnpj='03.482.042/0001-02',
            name='Marcelo Tostes Advogados Associados',
            legal_name='Marcelo Tostes Advogados Associados').save()


def populate_office_persons(apps, schema_editor):
    from django.contrib.auth.models import User
    from core.models import Office
    admin = User.objects.filter(username='admin').first()
    if admin:
        OfficeMembership = apps.get_model('core', 'OfficeMembership')
        default_office = Office.objects.filter(
            create_user=admin,
            cpf_cnpj='03.482.042/0001-02',
            name='Marcelo Tostes Advogados Associados',
            legal_name='Marcelo Tostes Advogados Associados').first()
        create_permission(Office.objects.get(pk=default_office.pk))
        for group in {
                group
                for group, perms in get_groups_with_perms(
                    default_office, attach_perms=True).items()
                if 'group_admin' in perms
        }:
            admin.groups.add(group)
        from core.models import Person
        from guardian.models import Group
        for user in User.objects.filter(
                groups__name=Person.ADMINISTRATOR_GROUP):
            user.groups.add(
                Group.objects.get(name='{}-{}-{}'.format(
                    Person.ADMINISTRATOR_GROUP, default_office.pk,
                    default_office.legal_name)))
        for user in User.objects.filter(
                groups__name=Person.CORRESPONDENT_GROUP):
            user.groups.add(
                Group.objects.get(name='{}-{}-{}'.format(
                    Person.CORRESPONDENT_GROUP, default_office.pk,
                    default_office.legal_name)))
        for user in User.objects.filter(groups__name=Person.REQUESTER_GROUP):
            user.groups.add(
                Group.objects.get(name='{}-{}-{}'.format(
                    Person.REQUESTER_GROUP, default_office.pk, default_office.
                    legal_name)))
        for user in User.objects.filter(groups__name=Person.SERVICE_GROUP):
            user.groups.add(
                Group.objects.get(
                    name='{}-{}-{}'.format(Person.SERVICE_GROUP, default_office
                                           .pk, default_office.legal_name)))
        for user in User.objects.filter(groups__name=Person.SUPERVISOR_GROUP):
            user.groups.add(
                Group.objects.get(name='{}-{}-{}'.format(
                    Person.SUPERVISOR_GROUP, default_office.pk, default_office.
                    legal_name)))
        Person = apps.get_model('core', 'Person')
        persons = Person.objects.all()
        User = apps.get_model('auth', 'User')
        Office = apps.get_model('core', 'Office')
        admin = User.objects.filter(username='admin').first()
        default_office = Office.objects.filter(pk=default_office.pk).first()
        OfficeMembership(
            office=default_office,
            person=admin.person,
            create_user=admin,
            is_active=True,
            create_date=timezone.now()).save()
        for person in persons:
            OfficeMembership(
                office=default_office,
                person=person,
                create_user=admin,
                is_active=True,
                create_date=timezone.now()).save()


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('guardian', '0001_initial'),
        ('core', '0073_officerelgroup'),
    ]

    operations = [
        migrations.CreateModel(
            name='OfficeMembership',
            fields=[
                ('id',
                 models.AutoField(
                     auto_created=True,
                     primary_key=True,
                     serialize=False,
                     verbose_name='ID')),
                ('create_date',
                 models.DateTimeField(
                     auto_now_add=True, verbose_name='Criado em')),
                ('alter_date',
                 models.DateTimeField(
                     auto_now=True, null=True, verbose_name='Atualizado em')),
                ('is_active',
                 models.BooleanField(default=True, verbose_name='Ativo')),
                ('alter_user',
                 models.ForeignKey(
                     blank=True,
                     null=True,
                     on_delete=django.db.models.deletion.PROTECT,
                     related_name='officemembership_alter_user',
                     to=settings.AUTH_USER_MODEL,
                     verbose_name='Alterado por')),
                ('create_user',
                 models.ForeignKey(
                     on_delete=django.db.models.deletion.PROTECT,
                     related_name='officemembership_create_user',
                     to=settings.AUTH_USER_MODEL,
                     verbose_name='Criado por')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunPython(remove_persons_from_office),
        migrations.RemoveField(
            model_name='office',
            name='persons',
        ),
        migrations.AddField(
            model_name='office',
            name='persons',
            field=models.ManyToManyField(
                blank=True,
                related_name='offices',
                through='core.OfficeMembership',
                to='core.Person'),
        ),
        migrations.AddField(
            model_name='officemembership',
            name='office',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to='core.Office'),
        ),
        migrations.AddField(
            model_name='officemembership',
            name='person',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to='core.Person'),
        ),
        migrations.RunPython(populate_office_persons),
        migrations.AddField(
            model_name='invite',
            name='email',
            field=models.EmailField(
                blank=True, max_length=255, null=True, verbose_name='E-mail'),
        ),
        migrations.AddField(
            model_name='invite',
            name='invite_code',
            field=models.CharField(
                blank=True,
                max_length=50,
                null=True,
                unique=True,
                verbose_name='Código do convite'),
        ),
        migrations.AlterField(
            model_name='invite',
            name='person',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='invites',
                to='core.Person',
                verbose_name='Pessoa'),
        ),
        migrations.AlterField(
            model_name='invite',
            name='status',
            field=models.CharField(
                choices=[('A', 'ACCEPTED'), ('R', 'REFUSED'),
                         ('N', 'NOT REVIEWED'), ('E', 'EXTERNAL')],
                default='N',
                max_length=1,
                verbose_name='Status'),
        ),
        migrations.AlterField(
            model_name='inviteoffice',
            name='status',
            field=models.CharField(
                choices=[('A', 'ACCEPTED'), ('R', 'REFUSED'),
                         ('N', 'NOT REVIEWED'), ('E', 'EXTERNAL')],
                default='N',
                max_length=1,
                verbose_name='Status'),
        ),
        migrations.AlterField(
            model_name='invite',
            name='invite_code',
            field=models.CharField(
                blank=True,
                default=core.models._create_hash,
                max_length=50,
                null=True,
                unique=True,
                verbose_name='Código do convite'),
        ),
    ]
