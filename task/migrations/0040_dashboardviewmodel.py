# -*- coding: utf-8 -*-
# Generated by Django 1.11.1 on 2017-09-04 18:22
from __future__ import unicode_literals

from django.contrib.postgres.operations import UnaccentExtension
from django.db import migrations, models
import django.utils.timezone
import task.models


class Migration(migrations.Migration):

    dependencies = [
        ('task', '0039_auto_20170831_1111'),
    ]

    operations = [
        migrations.CreateModel(
            name='DashboardViewModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delegation_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Data de Delegação')),
                ('acceptance_date', models.DateTimeField(null=True, verbose_name='Data de Aceitação')),
                ('reminder_deadline_date', models.DateTimeField(null=True, verbose_name='Primeiro Prazo')),
                ('final_deadline_date', models.DateTimeField(null=True, verbose_name='Segundo Prazo')),
                ('execution_date', models.DateTimeField(null=True, verbose_name='Data de Cumprimento')),
                ('return_date', models.DateTimeField(null=True, verbose_name='Data de Retorno')),
                ('refused_date', models.DateTimeField(null=True, verbose_name='Data de Recusa')),
                ('blocked_payment_date', models.DateTimeField(null=True, verbose_name='Data da Glosa')),
                ('finished_date', models.DateTimeField(null=True, verbose_name='Data de Finalização')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Descrição do serviço')),
                ('task_status', models.CharField(choices=[('A Cumprir', 'Accepted'), ('Em Aberto', 'Open'), ('Retorno', 'Return'), ('Cumprida', 'Done'), ('Recusada', 'Refused'), ('Glosada', 'Blockedpayment'), ('Finalizada', 'Finished'), ('Inválida', 'Invalid')], default=task.models.TaskStatus('Em Aberto'), max_length=30, verbose_name='')),
                ('client', models.CharField(max_length=255, null=True, verbose_name='Cliente')),
                ('type_service', models.CharField(max_length=255, null=True, verbose_name='Serviço')),
                ('survey_result', models.TextField(blank=True, null=True, verbose_name='Respotas do Formulário')),
            ],
            options={
                'managed': False,
                'verbose_name': 'Providência',
                'verbose_name_plural': 'Providências',
                'db_table': 'dashboard_view',
            },
        ),
    ]

    sql = """
        CREATE VIEW dashboard_view AS SELECT task.id,
            task.create_date,
            task.alter_date,
            task.legacy_code,
            task.delegation_date,
            task.acceptance_date,
            task.reminder_deadline_date,
            task.final_deadline_date,
            task.execution_date,
            task.return_date,
            task.refused_date,
            task.alter_user_id,
            task.create_user_id,
            task.person_asked_by_id,
            task.person_executed_by_id,
            task.movement_id,
            task.is_active,
            task.description,
            task.task_status,
            task.system_prefix,
            task.type_task_id,
            task.survey_result,
            task.blocked_payment_date,
            task.finished_date,
            task.person_distributed_by_id,
            person.name AS client,
            court_district.name AS court_district,
            court_division.name AS court_division,
            type_task.name AS type_service
           FROM (((((((task
             JOIN movement ON ((task.movement_id = movement.id)))
             JOIN law_suit ON ((movement.law_suit_id = law_suit.id)))
             JOIN folder ON ((law_suit.folder_id = folder.id)))
             JOIN person ON ((folder.person_customer_id = person.id)))
             JOIN court_district ON ((law_suit.court_district_id = court_district.id)))
             JOIN court_division ON ((law_suit.court_division_id = court_division.id)))
             JOIN type_task ON ((task.type_task_id = type_task.id)))
    """

    operations.append(migrations.RunSQL("drop view if exists dashboard_view;"))
    operations.append(migrations.RunSQL(sql))

    operations.append(UnaccentExtension())

