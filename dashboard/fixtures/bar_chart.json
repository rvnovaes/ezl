[
{
    "model": "dashboard.barchart",
    "pk": 1,
    "fields": {
        "name": "Top 10 combina\u00e7\u00e3o advogado e preposto",
        "code": "from lawsuit.models import Folder\r\nfrom task.models import Task\r\nfrom django.db.models import Max, Subquery, OuterRef, Count, Q\r\nfrom django.db.models.functions import Coalesce\r\n\r\nfolders = Folder.objects.filter(person_customer__company=self.company)\r\noffice_corresp = Task.objects.filter(id=OuterRef('child')).order_by('-id')\r\ntasks = Task.objects.filter(\r\n  \t\t# movement__folder__in=folders,\r\n  \t\tperson_company_representative__isnull=False\r\n    ).annotate(\r\n        filho=Max('child')\r\n    ).annotate(\r\n        office_exec=Subquery(office_corresp.values('office__legal_name')[:1])\r\n    ).annotate(\r\n        os_executor=Coalesce('person_executed_by__legal_name', 'office_exec')\r\n    ).filter(\r\n  \t\tos_executor__isnull=False\r\n\t).values(\r\n        'os_executor', 'person_company_representative__legal_name'\r\n    ).annotate(\r\n        total=Count('id')\r\n    ).order_by('-total')[:10]\r\nlabels = []\r\nvalues = []\r\nfor task in tasks:\r\n    labels.append([task['os_executor'], task['person_company_representative__legal_name']])\r\n    values.append(task['total'])\r\n\r\nresult = {\r\n  \"labels\": labels,\r\n  \"datasets\": [{\"label\": 'Top 10 combina\u00e7\u00e3o advogado e preposto',\r\n               \t\"data\": values,\r\n               \t\"backgroundColor\": \"#00FF00\",\r\n            \t\"borderColor\": \"#00FF00\"}]\r\n}",
        "schema": "{\r\n    \"labels\": [\r\n        \"T\u00cdTULOS DAS BARRAS: [JANEIRO, FEVEREIRO, MARCO]\"\r\n    ],\r\n    \"datasets\": [\r\n        {\r\n            \"label\": \"LABEL DO INDICADOR EX: (AUDI\\u00caCIAS POR M\\u00caS)\",\r\n            \"data\": [\r\n                \"VALORES DO INDICADOR EX: 20, 47, 50\"\r\n            ],\r\n            \"backgroundColor\": \"COR DO BACKGROUND DE FUNDO CASO FILL = True, EX: blue\",\r\n            \"borderColor\": \"COR DA BORDA DA LINHA EX: blue\"\r\n        }\r\n    ]\r\n}"
    }
},
{
    "model": "dashboard.barchart",
    "pk": 2,
    "fields": {
        "name": "Top 10 atrasos",
        "code": "from django.db.models import F, ExpressionWrapper, DurationField, Case, When, BooleanField, Count, OuterRef, Q, Max, Subquery\r\nfrom django.db.models.functions import Coalesce\r\nfrom task.models import Task, TaskGeolocation, CheckPointType\r\nfrom django_pandas.io import read_frame\r\nimport pandas as pd\r\nimport numpy\r\nimport datetime\r\nfrom pandas import pivot_table\r\n\r\noffice_corresp = Task.objects.filter(id=OuterRef('child')).order_by('-id')\r\ndtt = datetime.timedelta(0, 0, 0, 0, 30)\r\ntasks = Task.objects.filter(\r\n  \t\tQ(Q(executed_by_checkin__isnull=False) | Q(company_representative_checkin__isnull=False))\r\n    ).annotate(\r\n        filho=Max('child')\r\n    ).annotate(\r\n        office_exec=Subquery(office_corresp.values('office__legal_name')[:1])\r\n    ).annotate(\r\n        os_executor=Coalesce('person_executed_by__legal_name', 'office_exec')\r\n    ).annotate(\r\n  \t\tdiff_executed_by=ExpressionWrapper(\r\n    \t\tF('final_deadline_date') - F('executed_by_checkin__create_date'), output_field=DurationField())\r\n\t).annotate(\r\n  \t\texecuted_by_late=Case(\r\n          When(executed_by_checkin__isnull=True, then=True),\r\n          When(diff_executed_by__lt=dtt, then=True), default=False, output_field=BooleanField(),)\r\n\t)\r\nqs = tasks.values('id', 'os_executor', 'executed_by_late')\r\ndf = read_frame(qs)\r\n\r\npivot_executed = pivot_table(df, values='id', index=['os_executor'], columns=['executed_by_late'], aggfunc=lambda x: len(x), fill_value=0.0)\r\npivot_executed['total'] = pivot_executed.sum(axis=1)\r\npivot_executed['percent_late'] = round((pivot_executed[True] / pivot_executed['total'])*100, 2)\r\n\r\nresult_set = pivot_executed.sort_values(['percent_late', 'total', 'os_executor'], ascending=[True, False, True])[:20]\r\n\r\nlabels = list(result_set.T)\r\nvalues = list(result_set['percent_late'])\r\nresult = {\r\n  \"labels\": labels,\r\n  \"datasets\": [{\"label\": 'Top 10 advogados atrasados',\r\n               \t\"data\": values,\r\n               \t\"backgroundColor\": \"#FF0000\",\r\n            \t\"borderColor\": \"#FF0000\"}]\r\n}",
        "schema": "{\r\n    \"labels\": [\r\n        \"T\\u00cdTULOS DAS BARRAS: [JANEIRO, FEVEREIRO, MARCO]\"\r\n    ],\r\n    \"datasets\": [\r\n        {\r\n            \"label\": \"LABEL DO INDICADOR EX: (AUDI\\u00caNCIAS POR M\\u00caS)\",\r\n            \"data\": [\r\n                \"VALORES DO INDICADOR EX: 20, 47, 50\"\r\n            ],\r\n            \"backgroundColor\": \"COR DO BACKGROUND DE FUNDO CASO FILL = True, EX: blue\",\r\n            \"borderColor\": \"COR DA BORDA DA LINHA EX: blue\"\r\n        }\r\n    ]\r\n}"
    }
}
]
